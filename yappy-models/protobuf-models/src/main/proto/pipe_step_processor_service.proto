syntax = "proto3";

package com.krickert.search.model; // Using the same package as yappy_core_types for simplicity in imports

option java_package = "com.krickert.search.sdk"; // Or com.krickert.search.model - for generated Java
option java_multiple_files = true;
option java_outer_classname = "PipeStepProcessorServiceProto";

import "yappy_core_types.proto"; // Contains PipeStream, PipeDoc, Blob
import "google/protobuf/struct.proto";

// Service definition for a pipeline step processor.
// This interface is implemented by developer-created gRPC modules/services.
service PipeStepProcessor {
  // Processes a document (and/or blob) according to the step's configuration and logic.
  // This is the primary RPC for custom processing within the YAPPY framework.
  rpc ProcessDocument (ProcessPipeDocRequest) returns (ProcessResponse);
}

// Request message for the ProcessDocument RPC.
// This is constructed and sent by the grpc-pipeline-engine to a specific gRPC module.
message ProcessPipeDocRequest {
  // Context: Identifies the pipeline this step execution is part of.
  string pipeline_name = 1;

  // Context: Identifies the specific configured instance of the step being invoked.
  // This is the 'stepName' from the PipelineStepConfig.
  string pipe_step_name = 2;

  // Configuration: The specific, validated custom JSON configuration for THIS pipe_step_name.
  // The engine converts the jsonConfig string from PipelineStepConfig into this Struct.
  google.protobuf.Struct custom_json_config = 3;

  // Configuration: The 'configParams' map from PipelineStepConfig for THIS pipe_step_name.
  map<string, string> config_params = 4;

  // Data: The current state of the pipeline's data to be processed.
  // The engine ensures:
  // - pipe_stream_data.current_pipeline_name == this.pipeline_name
  // - pipe_stream_data.target_step_name == this.pipe_step_name
  // when sending this request, providing full context to the processor.
  PipeStream pipe_stream_data = 5;
}

// Response message for the ProcessDocument RPC.
// This is returned by the gRPC Service Implementation back to the engine.
message ProcessResponse {
  // Outcome: True if this step's processing was successful, false otherwise.
  bool success = 1;

  // Output Data: The modified or newly created PipeDoc.
  // If not provided, the engine assumes the PipeDoc within the original pipe_stream_data
  // either remains unchanged or that this step does not modify the PipeDoc directly.
  optional PipeDoc output_doc = 2;

  // Output Data: The modified or newly created Blob.
  // If not provided, similar assumptions as for output_doc apply to the blob.
  optional Blob output_blob = 3;

  // Error Details: Structured error information from *this processor* if success is false.
  // This is for errors specific to the processor's execution logic.
  // The engine will use this to populate a StepExecutionRecord.
  optional google.protobuf.Struct error_details = 4;

  // Logging: Logs or summary information generated by this processor step.
  // The engine will typically add these to the StepExecutionRecord for this step.
  repeated string processor_logs = 5;
}