syntax = "proto3";

// Assuming your yappy_core_types.proto is in com.krickert.search.model
// and generates Java classes into com.krickert.search.model
package com.krickert.search.model; // Or com.krickert.search.sdk if that's where PipeStepProcessor lives

option java_package = "com.krickert.search.sdk"; // Or com.krickert.search.model - for generated Java
option java_multiple_files = true;
option java_outer_classname = "PipeStepProcessorServiceProto";

// Import definitions from your core types file
import "yappy_core_types.proto"; // This file should contain PipeDoc, Blob, StepExecutionRecord, ErrorData etc.
import "google/protobuf/struct.proto"; // For custom_json_config
import "google/protobuf/empty.proto"; // Import for the Empty message

// Service definition for a pipeline step processor.
// This interface is implemented by developer-created gRPC modules/services.
service PipeStepProcessor {
  // Processes a document according to the step's configuration and logic.
  rpc ProcessData(ProcessRequest) returns (ProcessResponse);
  
  // Returns static registration information about this module
  rpc GetServiceRegistration (google.protobuf.Empty) returns (ServiceRegistrationData);
}

message ServiceRegistrationData {
  string module_name = 1;
  optional string json_config_schema = 2;
}


// Contains metadata provided by the pipeline engine for context.
// This data is generally for informational purposes, logging, tracing, or advanced conditional logic.
message ServiceMetadata {
  // The 'pipelineName' from PipelineConfig providing context for this call.
  string pipeline_name = 1;

  // The 'stepName' from PipelineStepConfig that this gRPC service instance is currently executing as.
  string pipe_step_name = 2;

  // Unique ID for the entire execution flow (equivalent to PipeStream.stream_id).
  string stream_id = 3;

  // The current hop number in the pipeline for this step's execution.
  int64 current_hop_number = 4;

  // History of previously executed steps in this stream.
  // Note: This can be large. Modules should use it judiciously.
  repeated StepExecutionRecord history = 5;

  // If the overall stream was previously marked with a critical error.
  // Modules might use this to alter behavior (e.g., skip processing if stream is already failed).
  optional ErrorData stream_error_data = 6;

  // Key-value parameters for the entire run's context (e.g., tenant_id, user_id, correlation_id).
  // Equivalent to PipeStream.context_params.
  map<string, string> context_params = 7;
}

// Contains configuration specific to this instance of the pipeline step.
message ProcessConfiguration {
  // The specific, validated custom JSON configuration for this step,
  // converted by the engine from PipelineStepConfig.customConfig.jsonConfig.
  google.protobuf.Struct custom_json_config = 1;

  // The 'configParams' map from PipelineStepConfig for this step.
  map<string, string> config_params = 2;
}

// Request message for the ProcessData RPC.
message ProcessRequest {
  // The primary document data to be processed.
  // The Blob is now expected to be within PipeDoc if used.
  PipeDoc document = 1;

  // Configuration for this specific processing step.
  ProcessConfiguration config = 2;

  // Engine-provided metadata for context and observability.
  ServiceMetadata metadata = 3;
}

// Response message for the ProcessData RPC.
// This is returned by the gRPC Service Implementation back to the engine.
// This message can remain largely the same as your existing ProcessResponse.
message ProcessResponse {
  // Outcome: True if this step's processing was successful, false otherwise.
  bool success = 1;

  // Output Data: The modified or newly created PipeDoc.
  // either remains unchanged or that this step does not modify the PipeDoc directly.
  // The Blob is part of the PipeDoc.
  optional PipeDoc output_doc = 2;

  // Error Details: Structured error information from *this processor* if success is false.
  // This is for errors specific to the processor's execution logic.
  optional google.protobuf.Struct error_details = 3; // Using Struct for flexibility.

  // Logging: Logs or summary information generated by this processor step.
  repeated string processor_logs = 4;
}