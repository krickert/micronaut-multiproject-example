CODE LISTING FOR GrpcTransportConfig.java



// File: yappy-models/pipeline-config-models/src/main/java/com/krickert/search/config/pipeline/model/GrpcTransportConfig.java
package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;

import java.util.Collections;
import java.util.Map;

@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record GrpcTransportConfig(
        @JsonProperty("serviceName") String serviceName, // Consul service name of the TARGET gRPC service
        @JsonProperty("grpcClientProperties") Map<String, String> grpcClientProperties
        // e.g., timeout, loadBalancingPolicy for THIS output call
) {
    @JsonCreator
    public GrpcTransportConfig(
            @JsonProperty("serviceName") String serviceName,
            @JsonProperty("grpcClientProperties") Map<String, String> grpcClientProperties
    ) {
        this.serviceName = serviceName; // Can be null if not a GRPC output, validation by OutputTarget
        this.grpcClientProperties = (grpcClientProperties == null) ? Collections.emptyMap() : Map.copyOf(grpcClientProperties);
    }
}
END OF GrpcTransportConfig.java


CODE LISTING FOR JsonConfigOptions.java



package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;

/**
 * Represents custom JSON configuration options for a pipeline step.
 * This record is immutable and primarily holds the configuration string.
 * Validation against a schema is handled by the service layer.
 *
 * @param jsonConfig The JSON configuration as a string for a specific step.
 *                   Cannot be null. Must be at least an empty JSON object string "{}".
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record JsonConfigOptions(
        @JsonProperty("jsonConfig") String jsonConfig
) {
    // Public constant for the default empty JSON object string
    public static final String DEFAULT_EMPTY_JSON = "{}";

    /**
     * Default constructor ensuring jsonConfig is initialized to an empty JSON object string.
     * Useful for cases where an empty configuration is the default.
     */
    public JsonConfigOptions() {
        this(DEFAULT_EMPTY_JSON);
    }

    /**
     * Canonical constructor.
     *
     * @param jsonConfig The JSON configuration string.
     * @throws IllegalArgumentException if jsonConfig is null.
     */
    @JsonCreator // Helps Jackson identify this as the constructor to use for deserialization
    public JsonConfigOptions(@JsonProperty("jsonConfig") String jsonConfig) {
        if (jsonConfig == null) {
            throw new IllegalArgumentException("jsonConfig cannot be null. Use an empty JSON object string '{}' if no configuration is intended.");
        }
        this.jsonConfig = jsonConfig;
        // Note: Validating if the string is syntactically correct JSON here is optional.
        // Often, this level of validation is deferred until the JSON is parsed against its schema.
        // If you want a basic check here, you could add it, but it might be redundant
        // with later schema validation.
    }
}
END OF JsonConfigOptions.java


CODE LISTING FOR KafkaInputDefinition.java



package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.validation.constraints.NotEmpty;
import lombok.Builder;

import java.util.List;
import java.util.Map;

@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record KafkaInputDefinition(
        @JsonProperty("listenTopics") @NotEmpty List<String> listenTopics,
        @JsonProperty("consumerGroupId") String consumerGroupId, // Now truly optional in config
        @JsonProperty("kafkaConsumerProperties") Map<String, String> kafkaConsumerProperties
) {
    public KafkaInputDefinition {
        // ... (validations for listenTopics, properties) ...
        // No validation for consumerGroupId being null/blank here, as it's optional.
        // The engine will handle defaulting if it's null.
    }
}
END OF KafkaInputDefinition.java


CODE LISTING FOR KafkaPublishTopic.java



package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;

/**
 * Specifies the name of a Kafka topic a pipeline step will publish to.
 * This record is immutable.
 *
 * @param topic The name of the Kafka topic. Must not be null or blank.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record KafkaPublishTopic(
        @JsonProperty("topic") String topic
) {
    public KafkaPublishTopic {
        if (topic == null || topic.isBlank()) {
            throw new IllegalArgumentException("KafkaPublishTopic topic cannot be null or blank.");
        }
    }
}
END OF KafkaPublishTopic.java


CODE LISTING FOR KafkaTransportConfig.java



// File: yappy-models/pipeline-config-models/src/main/java/com/krickert/search/config/pipeline/model/KafkaTransportConfig.java
package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;

import java.util.Collections;
import java.util.Map;

@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record KafkaTransportConfig(
        // For an OutputTarget, 'topic' is the primary field.
        // The old model's KafkaTransportConfig was multi-purpose.
        // Let's simplify for an OutputTarget context.
        @JsonProperty("topic") String topic, // Target topic to publish to
        // Consider if partitions/replicationFactor are relevant for an *output target's* config.
        // They are usually for topic creation/definition, not for a producer client.
        // @JsonProperty("partitions") Integer partitions,
        // @JsonProperty("replicationFactor") Integer replicationFactor,
        @JsonProperty("kafkaProducerProperties") Map<String, String> kafkaProducerProperties
        // Specific properties for the producer for THIS output
) {
    @JsonCreator
    public KafkaTransportConfig(
            @JsonProperty("topic") String topic,
            // @JsonProperty("partitions") Integer partitions,
            // @JsonProperty("replicationFactor") Integer replicationFactor,
            @JsonProperty("kafkaProducerProperties") Map<String, String> kafkaProducerProperties
    ) {
        this.topic = topic; // Can be null if not a Kafka output, validation handled by OutputTarget
        // this.partitions = partitions;
        // this.replicationFactor = replicationFactor;
        this.kafkaProducerProperties = (kafkaProducerProperties == null) ? Collections.emptyMap() : Map.copyOf(kafkaProducerProperties);
    }

    // Constructor from your old test for KafkaTransportConfig (used for step's own config)
    // This is likely NOT what's needed for OutputTarget's KafkaTransportConfig.
    // Keeping for reference from your old test:
    // KafkaTransportConfig(List<String> listenTopics, String publishTopicPattern, Map<String, String> kafkaProperties)
    // For an OUTPUT, it's just one target topic.
}
END OF KafkaTransportConfig.java


CODE LISTING FOR PipelineClusterConfig.java



package com.krickert.search.config.pipeline.model; // Or your actual package

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;

import java.util.Collections;
import java.util.Set;
// import java.util.stream.Collectors; // Not needed for this version

@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record PipelineClusterConfig(
        @JsonProperty("clusterName") String clusterName,
        @JsonProperty("pipelineGraphConfig") PipelineGraphConfig pipelineGraphConfig,
        @JsonProperty("pipelineModuleMap") PipelineModuleMap pipelineModuleMap,
        @JsonProperty("defaultPipelineName") String defaultPipelineName,
        @JsonProperty("allowedKafkaTopics") Set<String> allowedKafkaTopics,
        @JsonProperty("allowedGrpcServices") Set<String> allowedGrpcServices
) {
    // This is an EXPLICIT CANONICAL CONSTRUCTOR
    @JsonCreator
    public PipelineClusterConfig(
            @JsonProperty("clusterName") String clusterName,
            @JsonProperty("pipelineGraphConfig") PipelineGraphConfig pipelineGraphConfig,
            @JsonProperty("pipelineModuleMap") PipelineModuleMap pipelineModuleMap,
            @JsonProperty("defaultPipelineName") String defaultPipelineName,
            @JsonProperty("allowedKafkaTopics") Set<String> allowedKafkaTopics,
            @JsonProperty("allowedGrpcServices") Set<String> allowedGrpcServices
    ) {
        if (clusterName == null || clusterName.isBlank()) {
            throw new IllegalArgumentException("PipelineClusterConfig clusterName cannot be null or blank.");
        }
        this.clusterName = clusterName; // Assign validated parameter to the record component

        this.pipelineGraphConfig = pipelineGraphConfig; // Can be null, assigned directly
        this.pipelineModuleMap = pipelineModuleMap;     // Can be null, assigned directly
        this.defaultPipelineName = defaultPipelineName; // Can be null, assigned directly

        // Validate and normalize allowedKafkaTopics
        if (allowedKafkaTopics == null) {
            this.allowedKafkaTopics = Collections.emptySet(); // Assign default to the record component
        } else {
            for (String topic : allowedKafkaTopics) {
                if (topic == null || topic.isBlank()) {
                    throw new IllegalArgumentException("allowedKafkaTopics cannot contain null or blank strings.");
                }
            }
            this.allowedKafkaTopics = Set.copyOf(allowedKafkaTopics); // Assign immutable copy to the record component
        }

        // Validate and normalize allowedGrpcServices
        if (allowedGrpcServices == null) {
            this.allowedGrpcServices = Collections.emptySet(); // Assign default to the record component
        } else {
            for (String service : allowedGrpcServices) {
                if (service == null || service.isBlank()) {
                    throw new IllegalArgumentException("allowedGrpcServices cannot contain null or blank strings.");
                }
            }
            this.allowedGrpcServices = Set.copyOf(allowedGrpcServices); // Assign immutable copy to the record component
        }
    }
}
END OF PipelineClusterConfig.java


CODE LISTING FOR PipelineConfig.java



package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;

import java.util.Collections;
import java.util.Map;

/**
 * Defines a single named pipeline, comprising a map of its constituent pipeline steps.
 * This record is immutable.
 *
 * @param name          The name of the pipeline (unique within a PipelineGraphConfig). Must not be null or blank.
 * @param pipelineSteps Map of pipeline step configurations, where the key is the step ID
 *                      (PipelineStepConfig.pipelineStepId). Can be null (treated as empty).
 *                      If provided, keys and values cannot be null.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record PipelineConfig(
        @JsonProperty("name") String name,
        @JsonProperty("pipelineSteps") Map<String, PipelineStepConfig> pipelineSteps
) {
    // Canonical constructor making map unmodifiable and handling nulls
    public PipelineConfig {
        if (name == null || name.isBlank()) {
            throw new IllegalArgumentException("PipelineConfig name cannot be null or blank.");
        }
        pipelineSteps = (pipelineSteps == null) ? Collections.emptyMap() : Map.copyOf(pipelineSteps);
        // Add validation for map contents if necessary (e.g., keys matching step IDs)
        // Map.copyOf will throw NPE if map contains null keys or values.
    }
}
END OF PipelineConfig.java


CODE LISTING FOR PipelineGraphConfig.java



package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;

import java.util.Collections;
import java.util.Map;

/**
 * Configuration for a pipeline graph, which contains a map of all defined pipeline configurations.
 * This record is immutable.
 *
 * @param pipelines Map of pipeline configurations, where the key is the pipeline ID
 *                  (e.g., PipelineConfig.name or another unique ID). Can be null (treated as empty).
 *                  If provided, keys and values cannot be null.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record PipelineGraphConfig(
        @JsonProperty("pipelines") Map<String, PipelineConfig> pipelines
) {
    // Canonical constructor making map unmodifiable and handling nulls
    public PipelineGraphConfig {
        pipelines = (pipelines == null) ? Collections.emptyMap() : Map.copyOf(pipelines);
        // Map.copyOf will throw NPE if map contains null keys or values.
    }

    public PipelineConfig getPipelineConfig(String pipelineId) {
        return pipelines.get(pipelineId);
    }
}
END OF PipelineGraphConfig.java


CODE LISTING FOR PipelineModuleConfiguration.java



package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;

/**
 * Defines a type of pipeline module, corresponding to a specific gRPC service implementation.
 * This record is immutable.
 *
 * @param implementationName          The user-friendly display name of this module. Must not be null or blank.
 * @param implementationId            The unique ID of the module (e.g., service ID). This ID is used as the
 *                                    key in PipelineModuleMap.availableModules and typically serves as the
 *                                    'subject' for its schema in the schema registry. Must not be null or blank.
 * @param customConfigSchemaReference A reference to the schema in the registry that defines the structure
 *                                    for this module's custom configuration. Can be null if the module
 *                                    does not have a defined custom configuration schema or accepts any
 *                                    JSON object.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record PipelineModuleConfiguration(
        @JsonProperty("implementationName") String implementationName,
        @JsonProperty("implementationId") String implementationId,
        @JsonProperty("customConfigSchemaReference") SchemaReference customConfigSchemaReference
) {
    public PipelineModuleConfiguration {
        if (implementationName == null || implementationName.isBlank()) {
            throw new IllegalArgumentException("PipelineModuleConfiguration implementationName cannot be null or blank.");
        }
        if (implementationId == null || implementationId.isBlank()) {
            throw new IllegalArgumentException("PipelineModuleConfiguration implementationId cannot be null or blank.");
        }
        // customConfigSchemaReference can be null
    }
}
END OF PipelineModuleConfiguration.java


CODE LISTING FOR PipelineModuleMap.java



package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;

import java.util.Collections;
import java.util.Map;

/**
 * A catalog of available pipeline module configurations.
 * Each entry maps a module's implementationId to its definition.
 * This record is immutable.
 *
 * @param availableModules Map containing the available pipeline module configurations, keyed by
 *                         module implementation ID. Can be null (treated as empty).
 *                         If provided, keys and values cannot be null.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record PipelineModuleMap(
        @JsonProperty("availableModules") Map<String, PipelineModuleConfiguration> availableModules
) {
    // Canonical constructor making map unmodifiable and handling nulls
    public PipelineModuleMap {
        availableModules = (availableModules == null) ? Collections.emptyMap() : Map.copyOf(availableModules);
        // Map.copyOf will throw NPE if map contains null keys or values.
    }
}
END OF PipelineModuleMap.java


CODE LISTING FOR PipelineStepConfig.java



package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Builder;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record PipelineStepConfig(
        @JsonProperty("stepName") @NotBlank String stepName,
        @JsonProperty("stepType") @NotNull StepType stepType,
        @JsonProperty("description") String description,
        @JsonProperty("customConfigSchemaId") String customConfigSchemaId,
        @JsonProperty("customConfig") @Valid JsonConfigOptions customConfig, // Inner record JsonConfigOptions
        @JsonProperty("kafkaInputs") @Valid List<KafkaInputDefinition> kafkaInputs,
        @JsonProperty("outputs") @Valid Map<String, OutputTarget> outputs,
        @JsonProperty("maxRetries") Integer maxRetries,
        @JsonProperty("retryBackoffMs") Long retryBackoffMs,
        @JsonProperty("maxRetryBackoffMs") Long maxRetryBackoffMs,
        @JsonProperty("retryBackoffMultiplier") Double retryBackoffMultiplier,
        @JsonProperty("stepTimeoutMs") Long stepTimeoutMs,
        @JsonProperty("processorInfo") @NotNull(message = "Processor information (processorInfo) must be provided.") @Valid ProcessorInfo processorInfo
) {

    // Canonical constructor (as provided by you, with validation)
    @JsonCreator
    public PipelineStepConfig(
            @JsonProperty("stepName") String stepName,
            @JsonProperty("stepType") StepType stepType,
            @JsonProperty("description") String description,
            @JsonProperty("customConfigSchemaId") String customConfigSchemaId,
            @JsonProperty("customConfig") JsonConfigOptions customConfig,
            @JsonProperty("kafkaInputs") List<KafkaInputDefinition> kafkaInputs,
            @JsonProperty("outputs") Map<String, OutputTarget> outputs,
            @JsonProperty("maxRetries") Integer maxRetries,
            @JsonProperty("retryBackoffMs") Long retryBackoffMs,
            @JsonProperty("maxRetryBackoffMs") Long maxRetryBackoffMs,
            @JsonProperty("retryBackoffMultiplier") Double retryBackoffMultiplier,
            @JsonProperty("stepTimeoutMs") Long stepTimeoutMs,
            @JsonProperty("processorInfo") ProcessorInfo processorInfo
    ) {
        this.stepName = Objects.requireNonNull(stepName, "stepName cannot be null");
        if (stepName.isBlank()) throw new IllegalArgumentException("stepName cannot be blank");

        this.stepType = Objects.requireNonNull(stepType, "stepType cannot be null");
        this.description = description;
        this.customConfigSchemaId = customConfigSchemaId;
        this.customConfig = customConfig; // Nullable, or provide default if desired

        this.kafkaInputs = (kafkaInputs == null) ? Collections.emptyList() : List.copyOf(kafkaInputs);
        this.outputs = (outputs == null) ? Collections.emptyMap() : Map.copyOf(outputs);
        this.maxRetries = (maxRetries == null || maxRetries < 0) ? 0 : maxRetries;
        this.retryBackoffMs = (retryBackoffMs == null || retryBackoffMs < 0) ? 1000L : retryBackoffMs;
        this.maxRetryBackoffMs = (maxRetryBackoffMs == null || maxRetryBackoffMs < 0) ? 30000L : maxRetryBackoffMs;
        this.retryBackoffMultiplier = (retryBackoffMultiplier == null || retryBackoffMultiplier <= 0) ? 2.0 : retryBackoffMultiplier;
        this.stepTimeoutMs = (stepTimeoutMs == null || stepTimeoutMs < 0) ? null : stepTimeoutMs;
        this.processorInfo = Objects.requireNonNull(processorInfo, "processorInfo cannot be null");

        // ProcessorInfo validation
        if (this.processorInfo.grpcServiceName() != null && !this.processorInfo.grpcServiceName().isBlank() &&
                this.processorInfo.internalProcessorBeanName() != null && !this.processorInfo.internalProcessorBeanName().isBlank()) {
            throw new IllegalArgumentException("ProcessorInfo cannot have both grpcServiceName and internalProcessorBeanName set.");
        }
        if ((this.processorInfo.grpcServiceName() == null || this.processorInfo.grpcServiceName().isBlank()) &&
                (this.processorInfo.internalProcessorBeanName() == null || this.processorInfo.internalProcessorBeanName().isBlank())) {
            throw new IllegalArgumentException("ProcessorInfo must have either grpcServiceName or internalProcessorBeanName set.");
        }
    }

    // --- START: Added Helper Constructors ---

    /**
     * Constructor matching the parameters:
     * stepName, stepType, description, customConfigSchemaId, customConfig,
     * outputs, maxRetries, retryBackoffMs, maxRetryBackoffMs,
     * retryBackoffMultiplier, stepTimeoutMs, processorInfo.
     * Defaults kafkaInputs to an empty list.
     */
    public PipelineStepConfig(
            String stepName,
            StepType stepType,
            String description,
            String customConfigSchemaId,
            JsonConfigOptions customConfig,
            Map<String, OutputTarget> outputs,
            Integer maxRetries,
            Long retryBackoffMs,
            Long maxRetryBackoffMs,
            Double retryBackoffMultiplier,
            Long stepTimeoutMs,
            ProcessorInfo processorInfo
    ) {
        this(
                stepName,
                stepType,
                description,
                customConfigSchemaId,
                customConfig,
                Collections.emptyList(), // Default for kafkaInputs
                outputs,
                maxRetries,
                retryBackoffMs,
                maxRetryBackoffMs,
                retryBackoffMultiplier,
                stepTimeoutMs,
                processorInfo
        );
    }

    public PipelineStepConfig(
            String stepName,
            StepType stepType,
            ProcessorInfo processorInfo,
            PipelineStepConfig.JsonConfigOptions customConfig, // Ensure this refers to the inner record
            String customConfigSchemaId
    ) {
        this(
                stepName,
                stepType,
                "Test Description for " + stepName, // default description
                customConfigSchemaId,
                customConfig,
                Collections.emptyList(), // default kafkaInputs
                Collections.emptyMap(),  // default outputs
                0,       // default maxRetries
                1000L,   // default retryBackoffMs
                30000L,  // default maxRetryBackoffMs
                2.0,     // default retryBackoffMultiplier
                null,    // default stepTimeoutMs
                processorInfo
        );
    }

    public PipelineStepConfig(
            String stepName,
            StepType stepType,
            ProcessorInfo processorInfo,
            PipelineStepConfig.JsonConfigOptions customConfig // Inner record
    ) {
        this(stepName, stepType, processorInfo, customConfig, null);
    }

    public PipelineStepConfig(
            String stepName,
            StepType stepType,
            ProcessorInfo processorInfo
    ) {
        this(
                stepName,
                stepType,
                processorInfo,
                new PipelineStepConfig.JsonConfigOptions(JsonNodeFactory.instance.objectNode(), Collections.emptyMap()), // Default empty custom config
                null
        );
    }
    // --- END: Added Helper Constructors ---

    // Inner Records (OutputTarget, JsonConfigOptions, ProcessorInfo)
    // Assuming they are defined as per the uploaded PipelineStepConfig.java
    // ... (OutputTarget, JsonConfigOptions, ProcessorInfo as defined in your uploaded file) ...
    // For brevity, not repeating them here but they should be part of this file.
    // Ensuring the JsonConfigOptions inner record is what we expect:
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @Builder
    public record JsonConfigOptions(
            @JsonProperty("jsonConfig") JsonNode jsonConfig, // This should be JsonNode
            @JsonProperty("configParams") Map<String, String> configParams
    ) {
        @JsonCreator
        public JsonConfigOptions(
                @JsonProperty("jsonConfig") JsonNode jsonConfig,
                @JsonProperty("configParams") Map<String, String> configParams
        ) {
            this.jsonConfig = jsonConfig; // Can be null if not provided in JSON
            this.configParams = (configParams == null) ? Collections.emptyMap() : Map.copyOf(configParams);
        }

        // Convenience for tests if only jsonNode is needed
        public JsonConfigOptions(JsonNode jsonNode) {
            this(jsonNode, Collections.emptyMap());
        }

        // Convenience for tests if only configParams are needed
        public JsonConfigOptions(Map<String, String> configParams) {
            this(null, configParams); // Or JsonNodeFactory.instance.objectNode() if jsonConfig should never be null in the object
        }
    }

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @Builder
    public record OutputTarget(
            @JsonProperty("targetStepName") @NotBlank String targetStepName,
            @JsonProperty("transportType") @NotNull TransportType transportType,
            @JsonProperty("grpcTransport") @Valid GrpcTransportConfig grpcTransport,
            @JsonProperty("kafkaTransport") @Valid KafkaTransportConfig kafkaTransport
    ) {
        @JsonCreator
        public OutputTarget(
                @JsonProperty("targetStepName") String targetStepName,
                @JsonProperty("transportType") TransportType transportType,
                @JsonProperty("grpcTransport") GrpcTransportConfig grpcTransport,
                @JsonProperty("kafkaTransport") KafkaTransportConfig kafkaTransport
        ) {
            this.targetStepName = Objects.requireNonNull(targetStepName, "targetStepName cannot be null");
            if (this.targetStepName.isBlank()) throw new IllegalArgumentException("targetStepName cannot be blank");

            this.transportType = (transportType == null) ? TransportType.GRPC : transportType;
            this.grpcTransport = grpcTransport;
            this.kafkaTransport = kafkaTransport;

            if (this.transportType == TransportType.KAFKA && this.kafkaTransport == null) {
                throw new IllegalArgumentException("OutputTarget: KafkaTransportConfig must be provided when transportType is KAFKA for targetStepName '" + targetStepName + "'.");
            }
            if (this.transportType != TransportType.KAFKA && this.kafkaTransport != null) {
                throw new IllegalArgumentException("OutputTarget: KafkaTransportConfig should only be provided when transportType is KAFKA (found type: " + this.transportType + ") for targetStepName '" + targetStepName + "'.");
            }
            if (this.transportType == TransportType.GRPC && this.grpcTransport == null) {
                throw new IllegalArgumentException("OutputTarget: GrpcTransportConfig must be provided when transportType is GRPC for targetStepName '" + targetStepName + "'.");
            }
            if (this.transportType != TransportType.GRPC && this.grpcTransport != null) {
                throw new IllegalArgumentException("OutputTarget: GrpcTransportConfig should only be provided when transportType is GRPC (found type: " + this.transportType + ") for targetStepName '" + targetStepName + "'.");
            }
        }
    }

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @Builder
    public record ProcessorInfo(
            @JsonProperty("grpcServiceName") String grpcServiceName,
            @JsonProperty("internalProcessorBeanName") String internalProcessorBeanName
    ) {
        @JsonCreator
        public ProcessorInfo(
                @JsonProperty("grpcServiceName") String grpcServiceName,
                @JsonProperty("internalProcessorBeanName") String internalProcessorBeanName
        ) {
            boolean grpcSet = grpcServiceName != null && !grpcServiceName.isBlank();
            boolean beanSet = internalProcessorBeanName != null && !internalProcessorBeanName.isBlank();

            if (grpcSet && beanSet) {
                throw new IllegalArgumentException("ProcessorInfo cannot have both grpcServiceName and internalProcessorBeanName set.");
            }
            if (!grpcSet && !beanSet) {
                throw new IllegalArgumentException("ProcessorInfo must have either grpcServiceName or internalProcessorBeanName set.");
            }
            this.grpcServiceName = grpcServiceName;
            this.internalProcessorBeanName = internalProcessorBeanName;
        }
    }
}
END OF PipelineStepConfig.java


CODE LISTING FOR SchemaReference.java



package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;

// ... (javadoc)
@JsonInclude(JsonInclude.Include.NON_NULL)
@Builder
public record SchemaReference(
        @JsonProperty("subject") String subject,
        @JsonProperty("version") Integer version
) {
    // Validating constructor
    public SchemaReference {
        if (subject == null || subject.isBlank()) {
            throw new IllegalArgumentException("SchemaReference subject cannot be null or blank.");
        }
        if (version == null || version < 1) {
            throw new IllegalArgumentException("SchemaReference version cannot be null and must be positive.");
        }
    }

    /**
     * Returns a string representation combining subject and version,
     * suitable for logging or as a unique identifier.
     * Example: "my-schema-subject:3"
     *
     * @return A string combining subject and version.
     */
    public String toIdentifier() {
        return String.format("%s:%s", subject, version);
    }

    // The default toString() for a record is already quite good:
    // SchemaReference[subject=my-schema-subject, version=3]
    // but toIdentifier() gives you a more specific format if needed.
}
END OF SchemaReference.java


CODE LISTING FOR StepType.java



package com.krickert.search.config.pipeline.model;

import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * Defines the type of a pipeline step, which affects its validation rules and behavior.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public enum StepType {
    /**
     * Standard pipeline step that can have both inputs and outputs.
     */
    PIPELINE,

    /**
     * Initial pipeline step that can only have outputs, not inputs.
     * These steps serve as entry points to the pipeline.
     */
    INITIAL_PIPELINE,

    /**
     * Terminal pipeline step that can have inputs but no outputs.
     */
    SINK
}END OF StepType.java


CODE LISTING FOR TransportType.java



package com.krickert.search.config.pipeline.model; // Or your chosen package

import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * Defines the transport mechanism for a pipeline step.
 */
@JsonInclude(JsonInclude.Include.NON_NULL) // Ensure nulls are not included during serialization
public enum TransportType {
    KAFKA,
    GRPC,
    INTERNAL // For steps executed directly by the pipeline engine
}END OF TransportType.java


