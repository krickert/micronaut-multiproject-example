version: '3.8'

networks:
  yappy-network:
    driver: bridge

services:
  # Infrastructure Services
  consul:
    image: consul:latest
    container_name: yappy-consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    networks:
      - yappy-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: yappy-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - yappy-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: yappy-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - yappy-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  apicurio:
    image: apicurio/apicurio-registry-mem:latest
    container_name: yappy-apicurio
    ports:
      - "8081:8080"
    networks:
      - yappy-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # YAPPY Services
  engine:
    image: yappy-engine:latest
    container_name: yappy-engine
    depends_on:
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
      apicurio:
        condition: service_healthy
    ports:
      - "8080:8080"     # HTTP/Health
      - "50050:50050"   # Engine gRPC
      - "50051:50051"   # Module Registration gRPC
    environment:
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      APICURIO_REGISTRY_URL: http://apicurio:8080
      YAPPY_ENGINE_NAME: local-engine
      YAPPY_CLUSTER_NAME: local-cluster
      LOG_LEVEL: DEBUG
    networks:
      - yappy-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  tika-parser:
    image: yappy-tika-parser:latest
    container_name: yappy-tika-parser
    depends_on:
      engine:
        condition: service_healthy
    ports:
      - "50053:50053"
    environment:
      GRPC_PORT: 50053
      LOG_LEVEL: INFO
    networks:
      - yappy-network
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50053"]
      interval: 10s
      timeout: 5s
      retries: 5

  chunker:
    image: yappy-chunker:latest
    container_name: yappy-chunker
    depends_on:
      engine:
        condition: service_healthy
    ports:
      - "50052:50052"
    environment:
      GRPC_PORT: 50052
      LOG_LEVEL: INFO
    networks:
      - yappy-network
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50052"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Module Registration Helper
  # This service automatically registers modules with the engine
  module-registrar:
    image: fullstorydev/grpcurl:latest
    container_name: yappy-module-registrar
    depends_on:
      engine:
        condition: service_healthy
      tika-parser:
        condition: service_healthy
      chunker:
        condition: service_healthy
    networks:
      - yappy-network
    command: |
      sh -c '
        echo "Waiting for services to be ready..."
        sleep 10
        
        echo "Registering Tika Parser..."
        grpcurl -plaintext -d '\''{"service_name":"tika-parser","service_id":"tika-parser-local","host":"tika-parser","port":50053,"health_endpoint":"/grpc.health.v1.Health/Check","metadata":{"version":"1.0.0"}}'\'' engine:50051 com.krickert.search.grpc.ModuleRegistration/RegisterModule
        
        echo "Registering Chunker..."
        grpcurl -plaintext -d '\''{"service_name":"chunker","service_id":"chunker-local","host":"chunker","port":50052,"health_endpoint":"/grpc.health.v1.Health/Check","metadata":{"version":"1.0.0"}}'\'' engine:50051 com.krickert.search.grpc.ModuleRegistration/RegisterModule
        
        echo "Module registration complete!"
      '

# Volumes for persistence (optional)
volumes:
  consul-data:
  kafka-data:
  zookeeper-data: