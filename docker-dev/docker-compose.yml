version: '3.8'

services:
  moto-glue:
    image: motoserver/moto:latest
    command: -H 0.0.0.0
    ports:
      - "5001:5000"
    environment:
      - MOTO_SERVICE=glue
      - TEST_SERVER_MODE=true

  # 1. Kafka in Kraft mode
  kafka:
    image: apache/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,LOCALHOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,LOCALHOST://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,LOCALHOST://localhost:9094
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CLUSTER_ID: 'testcontainers'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_HELP_OPTS: -Xmx4096M
    volumes:
      - kafka-data:/var/lib/kafka/data


  # 2. Apicurio Registry
  apicurio:
    image: apicurio/apicurio-registry:latest
    container_name: apicurio
    ports:
      - "8080:8080"
    environment:
      REGISTRY_DATASOURCE_URL: "jdbc:h2:mem:registry;DB_CLOSE_DELAY=-1"
      REGISTRY_DATASOURCE_USERNAME: "sa"
      REGISTRY_DATASOURCE_PASSWORD: "sa"
    depends_on:
      - kafka

  # 3. Solr in cloud mode
  solr:
    image: solr:9.8.1
    container_name: solr
    ports:
      - "8983:8983"
    command: solr -c -f
    environment:
      SOLR_HEAP: "2g"


  # 4. Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka

  consul:
    image: hashicorp/consul:latest # Use the latest official Consul image
    container_name: consul-server-dev # Optional: give the container a specific name
    ports:
      # --- Standard Consul Ports ---
      # Port 8500 (TCP): HTTP API & Web UI access
      # Used for interacting with Consul via API or the graphical user interface.
      - "8500:8500"

      # Port 8600 (TCP & UDP): DNS Interface
      # Used for service discovery via DNS queries.
      - "8600:8600/tcp"
      - "8600:8600/udp"

      # --- Ports primarily for Agent Communication (within a cluster) ---
      # Port 8300 (TCP): Server RPC
      # Used for communication between Consul servers and between servers and clients.
      - "8300:8300" # Exposing this is useful if other agents outside compose need to connect

      # Port 8301 (TCP & UDP): Serf LAN Gossip
      # Used for agent discovery and health checking within the local datacenter (LAN).
      - "8301:8301/tcp"
      - "8301:8301/udp"

      # Port 8302 (TCP & UDP): Serf WAN Gossip
      # Used by servers to communicate across different datacenters (WAN).
      # Often not needed for single-datacenter or dev setups, but included for completeness.
      # - "8302:8302/tcp"  # Uncomment if needed for WAN federation
      # - "8302:8302/udp"  # Uncomment if needed for WAN federation

    # Command to run Consul agent in development mode
    command: "agent -dev -client=0.0.0.0 -ui"
    # Explanation of command flags:
    # agent:           Runs the Consul agent process.
    # -dev:            Starts a single-node server in development mode.
    #                  This is convenient for testing but not for production (in-memory storage).
    #                  It implies -server, -bootstrap-expect=1, and enables the UI.
    # -client=0.0.0.0: Binds client interfaces (HTTP API, DNS) to all network interfaces
    #                  within the container, making them accessible from the host via the mapped ports.
    # -ui:             Explicitly enables the web UI (though often implied by -dev).

networks:
  internal_app_net: # Define the custom network
    driver: bridge
    name: search-dev # Optional: give the docker network a specific name

volumes:
  kafka-data:
  solr-data:
