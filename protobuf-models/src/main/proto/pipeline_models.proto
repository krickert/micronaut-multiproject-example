syntax = "proto3";
package com.krickert.search.model;
option java_multiple_files = true;
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";

message PipeDoc {
  string id = 1;
  string title = 2;
  string body = 3;
  repeated string keywords = 4;
  string document_type = 5;
  string revision_id = 6;
  google.protobuf.Timestamp creation_date = 7;
  google.protobuf.Timestamp last_modified = 8;
  google.protobuf.Struct custom_data = 9;
  SemanticDoc chunk_embeddings = 10;
  map<string, Embedding> embeddings = 11;
}

message Embedding {
  repeated float embedding = 1;
}

message SemanticDoc {
  string parent_id = 1;
  string parent_field = 2;
  string chunk_config_id = 3;
  string semantic_config_id = 4;
  repeated SemanticChunk chunks = 5;
}

message SemanticChunk {
  string chunk_id = 1;
  int64 chunk_number = 2;
  ChunkEmbedding embedding = 3;
}

message ChunkEmbedding {
  string embedding_text = 1;
  repeated float embedding = 2;
}

message Route {
  RouteType routeType = 1;
  // For Kafka: the topic name; for gRPC: the endpoint tag or destination identifier.
  string destination = 2;
}

enum RouteType {
  UNKNOWN = 0;
  NULL_TERMINATION = 1;
  KAFKA = 2;
  GRPC = 3;
}

message PipeRequest {
  PipeDoc doc = 1;
  map<string, string> config = 2;
  repeated Route destinations = 3;
}

message OutputResponse {
  bool success = 1;
  oneof reply {
    PipeDoc outputDoc = 2;
    ErrorData errorData = 3;
  }
}

message ErrorData {
  string errorMessage = 2;
  repeated Route failedRoutes = 3;
  optional PipeRequest errorRequest = 4;
}

message PipeResponse {
  bool success = 1;
  optional ErrorData errorDate = 2;
}

message PipeStream {
  PipeRequest request = 1;
  repeated PipeResponse pipeReplies = 2;
  repeated string streamLogs = 3;
  string pipeline = 4;
}

// Service configuration that points to a service implementation and contains service-specific configuration
message ServiceConfig {
  // The name of the service implementation
  string service_implementation = 1;

  // Service-specific configuration parameters
  map<string, string> config_params = 2;
}

service PipelineService {
  rpc forward(PipeStream) returns (google.protobuf.Empty);
  rpc getOutput(PipeRequest) returns (OutputResponse);
}
