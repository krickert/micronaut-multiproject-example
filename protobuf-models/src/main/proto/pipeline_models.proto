syntax = "proto3";
package com.krickert.search.model; // Assuming this package from your file

option java_multiple_files = true;

// --- Imports from your original file ---
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";

// --- Message definitions (PipeDoc, PipeStream, etc. - assumed from your file) ---
message PipeDoc {
  string id = 1;
  string title = 2;
  string body = 3;
  repeated string keywords = 4;
  string document_type = 5;
  string revision_id = 6;
  google.protobuf.Timestamp creation_date = 7;
  google.protobuf.Timestamp last_modified = 8;
  google.protobuf.Struct custom_data = 9;
  SemanticDoc chunk_embeddings = 10;
  map<string, Embedding> embeddings = 11;
}

message Embedding {
  repeated float embedding = 1;
}

message SemanticDoc {
  string parent_id = 1;
  string parent_field = 2;
  string chunk_config_id = 3;
  string semantic_config_id = 4;
  repeated SemanticChunk chunks = 5;
}

message SemanticChunk {
  string chunk_id = 1;
  int64 chunk_number = 2;
  ChunkEmbedding embedding = 3;
}

message ChunkEmbedding {
  string embedding_text = 1;
  repeated float embedding = 2;
}

message Route {
  RouteType routeType = 1;
  string destination = 2;
}

enum RouteType {
  UNKNOWN = 0;
  NULL_TERMINATION = 1;
  KAFKA = 2;
  GRPC = 3;
}

message PipeRequest {
  PipeDoc doc = 1;
  map<string, string> config = 2;
  // destinations field removed based on your latest proto
}

message ErrorData {
  string errorMessage = 2;
  repeated Route failedRoutes = 3;
  optional PipeRequest errorRequest = 4;
}

message PipeResponse {
  bool success = 1;
  optional ErrorData errorData = 2;
}

message PipeStream {
  PipeRequest request = 1;//the next request for processing
  repeated PipeResponse pipeReplies = 2;//history of replies
  repeated string streamLogs = 3;//the list of logs from previous streams
  string pipeline = 4;//the name of the pipeline this stream belongs to
  string streamId = 5;//this is likely going to be the pipedoc ID in UUID string format
}

message ServiceConfig {
  string service_implementation = 1;
  map<string, string> config_params = 2;
}

message ServiceProcessRequest {
  PipeRequest request = 1;
  ServiceConfig config = 2;
  repeated Route destinations = 3;
  repeated string mapping_rules = 4;
}

message ServiceProcessRepsonse { // Note: Typo in original message name "Repsonse"
  bool success = 1;
  PipeDoc outputDoc = 2;
  string logs = 3;
  optional ErrorData errorData = 4;
}

// --- Service Definition ---
service PipeStreamEngine {
  // Forwards a complete PipeStream, often used for inter-service communication.
  // The receiving service determines the next step based on pipeline config.
  rpc forward(PipeStream) returns (google.protobuf.Empty);

  // Processes a request with explicit configuration and destinations.
  // Might be used for direct calls or testing specific steps.
  // Note: Typo in original response message name "Repsonse"
  rpc process(ServiceProcessRequest) returns (ServiceProcessRepsonse);
}