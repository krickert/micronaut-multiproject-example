syntax = "proto3";

package com.krickert.search.model.pipeline; // Main pipeline service package

// --- Imports ---
// Core pipeline data structures (assuming path relative to your proto source root)
import "pipeline_models.proto";
// Standard Google Protobuf types
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// --- Java Options ---
option java_multiple_files = true;
option java_package = "com.krickert.search.model.pipeline";

// =============================================================================
// Service Definition: PipelineService
// =============================================================================
// This service defines the core backend interface for managing the flow and
// execution of pipeline streams. It is distinct from the PipeStepProcessor
// service which is implemented by individual processing steps (developers).
//
// - `forward`: Handles the normal progression of a PipeStream between services.
// - `process`: Allows direct invocation for testing or simulation purposes,
//              bypassing some standard pipeline flow mechanisms.
// =============================================================================

service PipelineService {
  // --- RPC: forward ---
  // Purpose: Forwards a complete PipeStream from one processing step/service
  //          to the next logical one in the pipeline network.
  // Usage:   Typically used internally by the pipeline framework or services
  //          after they have completed their processing step. The receiving
  //          instance of PipelineService (or a component using it) inspects
  //          the PipeStream's state (e.g., current_step_index, pipeline_name)
  //          and the loaded pipeline configuration to determine where to route
  //          the stream next (e.g., call another gRPC service, put on Kafka).
  // Request: PipeStream - The stream containing the document, history, and
  //          current state within its pipeline journey.
  // Response: google.protobuf.Empty - Indicates acknowledgement of receipt.
  //           Errors are typically handled via gRPC status codes.
  rpc forward(com.krickert.search.model.PipeStream) returns (google.protobuf.Empty);

  // --- RPC: process ---
  // Purpose: Directly processes or simulates the processing of a PipeStream,
  //          allowing for more explicit control over configuration and potentially
  //          the execution path compared to 'forward'.
  // Usage:   Useful for:
  //          - End-to-end testing of a specific pipeline configuration.
  //          - Simulating how a document would be processed by a specific step
  //            or sequence within a named pipeline.
  //          - Triggering pipeline execution externally with specific overrides.
  // Request: ServiceProcessRequest - Contains the input stream and parameters
  //          defining how the processing should occur (e.g., which pipeline config,
  //          optional overrides).
  // Response: ServiceProcessResponse - Returns the resulting state of the stream
  //           after processing, along with success status and logs/errors.
  // Note: Corrected typo from "Repsonse" to "Response" in message name.
  rpc process(ServiceProcessRequest) returns (ServiceProcessResponse);
}

// =============================================================================
// Messages for the 'process' RPC
// =============================================================================

// --- Request Message: ServiceProcessRequest ---
// Defines the input for the `process` RPC call.
message ServiceProcessRequest {
  // The initial state of the stream to be processed. This includes the
  // document (`PipeDoc`) and metadata about its journey so far.
  // The `pipeline_name` and `current_step_index` within this stream
  // might be used as defaults if not overridden below.
  com.krickert.search.model.PipeStream input_stream = 1;

  // REQUIRED: The name of the pipeline configuration to use for this process call.
  // The backend service implementing PipelineService is responsible for loading
  // the corresponding configuration (e.g., from Consul, file, DB).
  string pipeline_name = 2;

  // OPTIONAL: Specify the name of a specific step within the named pipeline
  // to execute.
  // - If provided: The backend attempts to execute *only* this step using the
  //   configuration defined for it within the `pipeline_name` config. The
  //   `current_step_index` in the `input_stream` might be ignored or validated
  //   against this target.
  // - If omitted: Processing typically starts based on the `current_step_index`
  //   present in the `input_stream`, following the standard pipeline logic
  //   defined in the loaded `pipeline_name` configuration.
  optional string target_step_name = 3;

  // OPTIONAL: Provide specific configuration parameters to override *only* for
  // the `target_step_name` (if provided) or the step indicated by
  // `input_stream.current_step_index` (if `target_step_name` is omitted).
  // These overrides take precedence over the parameters defined in the main
  // pipeline configuration loaded via `pipeline_name`.
  map<string, string> step_config_override = 4;

  // OPTIONAL: Provide a specific JSON configuration structure to override
  // *only* for the target/current step. This takes precedence over any JSON
  // config defined in the main pipeline configuration.
  optional google.protobuf.Struct custom_json_config_override = 5;

  // OPTIONAL: Explicitly specify the destination *after* the processing defined
  // by this request completes successfully. This could be a service name,
  // Kafka topic, etc., depending on the backend implementation.
  // - If provided: The backend attempts to route the `output_stream` to this
  //   destination, potentially bypassing the normal next-step logic defined
  //   in the pipeline configuration.
  // - If omitted: The backend uses the standard pipeline configuration logic
  //   to determine the next destination after the simulated step completes.
  optional string explicit_next_destination = 6;
}

// --- Response Message: ServiceProcessResponse ---
// Defines the output from the `process` RPC call.
message ServiceProcessResponse {
  // Flag indicating if the overall processing requested was successful.
  // `false` indicates an error occurred during simulation/execution.
  bool success = 1;

  // The final state of the PipeStream after the requested processing.
  // - REQUIRED on success. This reflects modifications made by the executed step(s).
  // - OPTIONAL on failure (may contain the stream state at the point of failure).
  optional com.krickert.search.model.PipeStream output_stream = 2;

  // Structured error details if processing failed (success = false).
  // Provides more information than just the boolean flag.
  // Example keys: "errorCode", "errorMessage", "failedStepName", "stackTraceSnippet"
  optional google.protobuf.Struct error_details = 3;

  // Logs generated specifically during the execution of *this* `process` request.
  // Useful for debugging the simulation or direct call.
  repeated string execution_logs = 4;
}