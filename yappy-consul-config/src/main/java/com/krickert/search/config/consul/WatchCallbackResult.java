package com.krickert.search.config.consul;

import com.krickert.search.config.pipeline.model.PipelineClusterConfig;
import java.util.Optional;

/**
 * Represents the outcome of a configuration watch update attempt from Consul.
 * It can indicate a successful data retrieval, a key deletion,
 * or an error encountered during the fetch or deserialization process.
 *
 * @param config Optional containing the successfully fetched and deserialized {@link PipelineClusterConfig}.
 * Empty if the key was deleted, an error occurred, or the value was blank.
 * @param error Optional containing the {@link Throwable} if an error occurred. Empty otherwise.
 * @param deleted True if the watched key was confirmed to be deleted or its value became effectively empty/blank.
 */
public record WatchCallbackResult(
    Optional<PipelineClusterConfig> config,
    Optional<Throwable> error,
    boolean deleted // component 'deleted' of type boolean
) {

    /**
     * Creates a result for a successful configuration update.
     * The provided configuration should not be null.
     *
     * @param config The new, successfully deserialized {@link PipelineClusterConfig}. Must not be null.
     * @return A {@link WatchCallbackResult} indicating success.
     * @throws IllegalArgumentException if config is null.
     */
    public static WatchCallbackResult success(PipelineClusterConfig config) {
        if (config == null) {
            // This indicates an issue before calling this factory,
            // as a successfully deserialized config shouldn't be null.
            return failure(new IllegalArgumentException("Successful config cannot be null when creating WatchCallbackResult.success."));
        }
        return new WatchCallbackResult(Optional.of(config), Optional.empty(), false);
    }

    /**
     * Creates a result indicating the configuration key was deleted or its value became effectively empty.
     * Renamed from deleted() to createAsDeleted() to avoid compiler confusion with the 'deleted' component accessor.
     */
    public static WatchCallbackResult createAsDeleted() { // RENAMED STATIC FACTORY
        return new WatchCallbackResult(Optional.empty(), Optional.empty(), true);
    }

    /**
     * Creates a result for a failed update attempt (e.g., deserialization error, fetch error).
     *
     * @param error The error/exception that occurred. Can be null if the error type is unknown but still a failure.
     * @return A {@link WatchCallbackResult} indicating failure.
     */
    public static WatchCallbackResult failure(Throwable error) {
        return new WatchCallbackResult(Optional.empty(), Optional.ofNullable(error), false);
    }

    // Instance accessor for 'deleted' component is automatically generated by the record: public boolean deleted()

    /**
     * Checks if this result indicates an error occurred.
     *
     * @return True if an error is present, false otherwise.
     */
    public boolean hasError() {
        return error.isPresent();
    }

    /**
     * Indicates if this result represents a valid, present configuration
     * (i.e., config is present, no error occurred, and it wasn't a deletion).
     *
     * @return True if a valid configuration is present, false otherwise.
     */
    public boolean hasValidConfig() {
        // Uses the instance accessor this.deleted() or just deleted()
        return config.isPresent() && !hasError() && !this.deleted();
    }
}